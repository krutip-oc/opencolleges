<?php
/**
 * @file
 * Allows users to register with an e-mail address as their username.
 */

/**
 * Implements hook_user_presave().
 */
function email_registration_user_presave(&$edit, &$account, $category = NULL) {
    //print_r($account);exit;
    $originalemail = &$account->mail;
    $newemail = &$account->init;
    drupal_set_message(t('Email update has been successful. You need to login to your new email account: '. $newemail.' !== '.$originalemail.' to verify the new email address within 4 hours.'));
    _user_email_notify('email_reset', $account);
    _user_email_notify('oldemail_reset', $account);
    return;
}



/**
 * Returns a mail string for a variable name.
 *
 * Used by user_mail() and the settings forms to retrieve strings.
 */
/**
 * Conditionally create and send a notification email when a certain
 * operation happens on the given user account.
 *
 * @see user_mail_tokens()
 * @see drupal_mail()
 *
 * @param $op
 *   The operation being performed on the account. Possible values:
 *   - 'register_admin_created': Welcome message for user created by the admin.
 *   - 'register_no_approval_required': Welcome message when user
 *     self-registers.
 *   - 'register_pending_approval': Welcome message, user pending admin
 *     approval.
 *   - 'password_reset': Password recovery request.
 *   - 'status_activated': Account activated.
 *   - 'status_blocked': Account blocked.
 *   - 'cancel_confirm': Account cancellation request.
 *   - 'status_canceled': Account canceled.
 *
 * @param $account
 *   The user object of the account being notified. Must contain at
 *   least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *   Optional language to use for the notification, overriding account language.
 *
 * @return
 *   The return value from drupal_mail_system()->mail(), if ends up being
 *   called.
 */
function _user_email_notify($op, $account, $language = NULL) {
    //print $account->original->mail;exit;
    // By default, we always notify except for canceled and blocked.
    $default_notify = ($op != 'status_canceled' && $op != 'status_blocked');
    $notify = variable_get('user_mail_' . $op . '_notify', $default_notify);
    //if (!$notify) {
        $params['account'] = $account;
        $language = $language ? $language : user_preferred_language($account);

        if ($op == 'email_reset') {
            $mail = drupal_mail('user', $op, $account->init, $language, $params);
            // If a user registered requiring admin approval, notify the admin, too.
            // We use the site default language for this.
            drupal_mail('user', 'email_reset', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);
        }
        if ($op == 'oldemail_reset') {
            $mail = drupal_mail('user', $op, $account->mail, $language, $params);
            // If a user registered requiring admin approval, notify the admin, too.
            // We use the site default language for this.
            drupal_mail('user', 'oldemail_reset', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);
        }
    //}

    return empty($mail) ? NULL : $mail['result'];
}



/**
 * Implements hook_user_insert().
 */
function email_registration_user_insert(&$edit, &$account, $category = NULL) {
  // Don't create a new username if one is already set.
  if (!empty($account->name) && strpos($account->name, 'email_registration_') !== 0) {
    return;
  }

  // Other modules may implement hook_email_registration_name($edit, $account)
  // to generate a username (return a string to be used as the username, NULL
  // to have email_registration generate it).
  $names = module_invoke_all('email_registration_name', $edit, $account);
  // Remove any empty entries.
  $names = array_filter($names);

  if (empty($names)) {
    // Strip off everything after the @ sign.
    $vepid = db_query('SELECT ID from {StudentProfile} WHERE LOWER(email) = LOWER(:email)', array(':email' => $edit['mail']))->fetchField();
    $new_name = $vepid;

  }
  else {
    // One would expect a single implementation of the hook, but if there
    // are multiples out there use the last one.
    $new_name = array_pop($names);
  }

  // Ensure whatever name we have is unique.
  $new_name = email_registration_unique_username($new_name, $account->uid);
  //watchdog("test1",$new_name);

  // Replace with generated username.
  db_update('users')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->uid)
    ->execute();

  $edit['name'] = $new_name;
  $account->name = $new_name;
  return;
}

/**
 * Given a starting point for a Drupal username (e.g. the name portion of an
 * email address) return a legal, unique Drupal username. This function is
 * designed to work on the results of the /user/register or /admin/people/create
 * forms which have already called user_validate_name, valid_email_address
 * or a similar function. If your custom code is creating users, you should
 * ensure that the email/name is already validated using something like that.
 *
 * @param $name
 *   A name from which to base the final user name.  May contain illegal characters; these will be stripped.
 *
 * @param $uid
 *   (optional) Uid to ignore when searching for unique user (e.g. if we update the username after the
 *   {users} row is inserted)
 *
 * @return
 *   A unique user name based on $name.
 *
 * @see user_validate_name().
 *
 */
function email_registration_unique_username($name, $uid = 0) {
  // Strip illegal characters.

  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);

  // Strip leading and trailing spaces.
  $name = trim($name);

  // Convert any other series of spaces to a single underscore.
  $name = preg_replace('/ +/', '_', $name);

  // If there's nothing left use a default.
  $name = ('' === $name) ? t('user') : $name;

  // Truncate to reasonable size.
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;

  // Iterate until we find a unique name.
  $i = 0;
  do {
    $new_name = empty($i) ? $name : $name . '_' . $i;
    $found = db_query_range("SELECT uid from {users} WHERE uid <> :uid AND name = :name", 0, 1, array(':uid' => $uid, ':name' => $new_name))->fetchAssoc();
    $i++;
  } while (!empty($found));

  return $new_name;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_registration_form_user_register_form_alter(&$form, &$form_state) {
  $form['account']['name']['#type'] = 'value';
  $form['account']['name']['#value'] = 'email_registration_' . user_password();
  $form['account']['mail']['#title'] = t('E-mail');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_registration_form_user_pass_alter(&$form, &$form_state) {
  $form['name']['#title'] = t('E-mail');
  $form['name']['#description'] = t('A password reset message will be sent to your e-mail address.');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_registration_form_user_login_alter(&$form, &$form_state) {
  $form['name']['#title'] = t('E-mail');
  $form['name']['#description'] = t('Enter your e-mail address.');
  $form['name']['#element_validate'][] = 'email_registration_user_login_validate';
  $form['pass']['#description'] = t('Enter the password that accompanies your e-mail.');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_registration_form_user_login_block_alter(&$form, &$form_state) {
  $form['name']['#title'] = t('E-mail');
  $form['name']['#element_validate'][] = 'email_registration_user_login_validate';
}

/**
 * Form element validation handler for the user login form.
 * Allows users to authenticate by email, which is our preferred method.
 */
function email_registration_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name'])) {
    // Keep the email value in form state for furher validation.
    $form_state['values']['email'] = $form_state['values']['name'];
    if ($name = db_query('SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)', array(':name' => $form_state['values']['name']))->fetchField()) {
      $form_state['values']['name'] = $name;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_registration_form_user_profile_form_alter($form, &$form_state) {
  $form['account']['name']['#title'] = t('Display name');
}



/**
 * Implements hook_menu().
 */
function email_registration_menu() {
    $items['user/resetemail/%/%/%/%'] = array(
        'title' => 'Reset Email',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_email_reset', 2, 3, 4,5),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 */
function user_email_reset($form, &$form_state, $uid, $newemail, $timestamp, $hashed_pass, $action = NULL) {
    global $user;
   
    $newemail = urldecode($newemail);
    $oldemail = $account->mail;

    // When processing the one-time login link, we have to make sure that a user
    // isn't already logged in.
    if ($user->uid) {
        // The existing user is already logged in.
        if ($user->uid == $uid) {
            $token = drupal_random_key();
            $_SESSION['email_reset_' . $user->uid] = $token;
            db_update('users')
                ->fields(array('mail' => $newemail))
                ->condition('uid', $user->uid)
                ->execute();
            // Add the old email to history table
            db_insert('users_history')->fields(array('uid' => $user->uid, 'oldemail'=> $user->mail, 'modifiedtime' => date('Y/m/d H:i:s')))
                ->execute();
            drupal_set_message(t('You have just successfully changed your email address! <a href="!user_edit">View the changes.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));


            //drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your email address.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
        }
        // A different user is already logged in on the computer.
        else {
            $reset_link_account = user_load($uid);
            if (!empty($reset_link_account)) {
                drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
                    array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
            } else {
                // Invalid one-time link specifies an unknown user.
                drupal_set_message(t('The one-time login link you clicked is invalid.'));
            }
        }
        drupal_goto();
    }
    else {
        // Time out, in seconds, until login URL expires. Defaults to 4 hours =
        // 14400 seconds.
        $timeout = variable_get('user_email_reset_timeout', 14400);
        $current = REQUEST_TIME;
        // Some redundant checks for extra security ?
        $users = user_load_multiple(array($uid), array('status' => '1'));
        if ($timestamp <= $current && $account = reset($users)) {
            // No time out for first time login.
            if ($account->login && $current - $timestamp > $timeout) {
                drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
                drupal_goto('/user/'.$uid.'/edit');
            }
            elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
                // First stage is a confirmation form, then login
                if ($action == 'login') {
                    // Set the new user.
                    $user = $account;
                    // user_login_finalize() also updates the login timestamp of the
                    // user, which invalidates further use of the one-time login link.
                    user_login_finalize();
                    watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
                    drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your email address.'));
                    // Let the user's password be changed without the current password check.
                    $token = drupal_random_key();
                    $_SESSION['email_reset_' . $user->uid] = $token;
                    drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
                }if ($action == 'emailresetconfirm') {
                    $token = drupal_random_key();
                    $_SESSION['email_reset_' . $user->uid] = $token;
                    // Change the email addresss
                    db_update('users')
                        ->fields(array('mail' => $newemail))
                        ->condition('uid', $account->uid)
                        ->execute();
                    // Add the old email to history table
                    db_insert('users_history')->fields(array('uid' => $account->uid, 'oldemail'=> $account->mail, 'modifiedtime' => date('Y/m/d H:i:s')))
                        ->execute();
                    drupal_set_message(t('You have just successfully changed your email address! Please <a href="/user/login">Login</a> to see the changes'));
                }
                else {
                    $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your email address.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
                    $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
                    $form['actions'] = array('#type' => 'actions');
                    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Change Email Address'));
                    $form['#action'] = url("user/resetemail/$uid/$account->mail/$timestamp/$hashed_pass/emailresetconfirm");
                    return $form;
                }


            }
            else {
                drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
                drupal_goto('/user/'.$uid.'/edit');
            }
        }
        else {
            // Deny access, no more clues.
            // Everything will be in the watchdog's URL for the administrator to check.

            drupal_access_denied();
        }
    }

}